import { Queue, Worker, Job } from 'bullmq';
import connection from '../lib/bullmq-connection';
import prisma from '../prisma/client';
import { sendAuctionWinnerEmail } from '../utils/mailer';

const auctionQueueName = 'auctionQueue';
const auctionQueue = new Queue(auctionQueueName, { connection });

const auctionWorker = new Worker(
  auctionQueueName,
  async (job: Job) => {
    const { nftId } = job.data;

    console.log('üîß Closing auction for NFT:', nftId);

    // 1. L·∫•y th√¥ng tin phi√™n ƒë·∫•u gi√° v√† c√°c bid li√™n quan
    const auction = await prisma.auction.findUnique({
      where: { nftId },
      include: {
        bids: true,
        nft: true,
      },
    });

    if (!auction || !auction.active) {
      console.log('‚ö†Ô∏è Auction not found or already closed.');
      return;
    }

    // 2. ƒê√≥ng phi√™n ƒë·∫•u gi√°
    await prisma.auction.update({
      where: { id: auction.id },
      data: {
        active: false,
        endTime: new Date(),
      },
    });

    // 3. T√¨m ng∆∞·ªùi bid cao nh·∫•t
    if (!auction.bids || auction.bids.length === 0) {
      console.log('‚õî No bids were placed.');
      return;
    }

    const highestBid = auction.bids.reduce((max, bid) =>
      bid.amount > max.amount ? bid : max
    );

    // 4. Chuy·ªÉn quy·ªÅn s·ªü h·ªØu NFT cho ng∆∞·ªùi th·∫Øng
    await prisma.nFT.update({
      where: { id: auction.nftId },
      data: { ownerId: highestBid.userId },
    });

    // 5. Log ho·∫∑c g·ª≠i th√¥ng b√°o
    console.log(`‚úÖ NFT "${auction.nft.name}" transferred to user ${highestBid.userId}`);
    console.log(`üì¢ Notify user ${highestBid.userId} about winning the auction`);

    // TODO: G·ª≠i email th·ª±c ho·∫∑c th√¥ng b√°o push
    
    // 5. T·∫°o notification cho ng∆∞·ªùi th·∫Øng
    await prisma.notification.create({
      data: {
        userId: highestBid.userId,
        title: 'B·∫°n ƒë√£ th·∫Øng phi√™n ƒë·∫•u gi√°!',
        message: `B·∫°n tr·ªü th√†nh ch·ªß s·ªü h·ªØu m·ªõi c·ªßa NFT "${auction.nft.name}" v·ªõi gi√° ${highestBid.amount} ETH.`,
      },
    });

    // 6. Ghi l·ªãch s·ª≠ chuy·ªÉn nh∆∞·ª£ng
    await prisma.transferHistory.create({
      data: {
        nftId: auction.nftId,
        fromUserId: auction.ownerId,
        toUserId: highestBid.userId,
        amount: highestBid.amount,
      },
    });

    // 7. G·ª≠i email th√¥ng b√°o ng∆∞·ªùi th·∫Øng
    const winner = await prisma.user.findUnique({ where: { id: highestBid.userId } });

    if (winner?.email) {
    await sendAuctionWinnerEmail(winner.email, auction.nft.name, highestBid.amount);
  }

  },
  { connection }
);

auctionWorker.on('completed', (job: Job) => {
  console.log(`üéâ Job ${job.id} completed`);
});

auctionWorker.on('failed', (job: Job | undefined, err: Error) => {
  console.error(`‚ùå Job ${job?.id} failed: ${err.message}`);
});

export { auctionQueue };
